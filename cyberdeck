#!/usr/bin/env python3

import board
from gpiozero import CPUTemperature
import RPi.GPIO as GPIO
from ina260.controller import Controller
import adafruit_shtc3
from luma.core.interface.serial import spi
from luma.core.render import canvas
from luma.oled.device import ssd1351
from time import sleep
from PIL import Image, ImageDraw, ImageFont
import psutil

REGFONT = "fonts/sf-pro-display/SFPRODISPLAYREGULAR.OTF"
MEDFONT = "fonts/sf-pro-display/SFPRODISPLAYMEDIUM.OTF"
BLDFONT = "fonts/sf-pro-display/SFPRODISPLAYBOLD.OTF"

regfont_large = ImageFont.truetype(REGFONT, 22)
regfont_medium = ImageFont.truetype(REGFONT, 18)
regfont_small = ImageFont.truetype(REGFONT, 12)
medfont_large = ImageFont.truetype(MEDFONT, 22)
medfont_medium = ImageFont.truetype(MEDFONT, 18)
bldfont_large = ImageFont.truetype(BLDFONT, 22)

batt_img = Image.open("images/batt.png")
chg_img = Image.open("images/charging.png")

BATT_AGM = [10.50, 11.51, 11.66, 11.81, 11.95, 12.05, 12.15, 12.30, 12.50, 12.75, 13.00, 14.00, "SLA/AGM"]
BATT_WET = [10.50, 11.31, 11.58, 11.75, 11.90, 12.06, 12.20, 12.32, 12.42, 12.50, 12.60, 14.00, "WET"]
BATT_LIFEPO4 = [10.00, 12.00, 12.50, 12.80, 12.90, 13.00, 13.10, 13.20, 13.30, 13.40, 13.60, 14.00, "LIFEPO4"]

GREEN = "Lime"
YELLOW = "Yellow"
RED = "Crimson"
BLUE = "DodgerBlue"

CPUFAN_PIN = 23
EXTRFAN_PIN = 22
GPIO.setmode(GPIO.BCM)
GPIO.setup(CPUFAN_PIN, GPIO.OUT)
GPIO.setup(EXTRFAN_PIN, GPIO.OUT)

BATT_TYPE = BATT_AGM

serial = spi(device=0, port=0, gpio_DC=20, gpio_RST=21)
oled = ssd1351(serial, width=128, height=128, bgr=True)

try:
    i2c = board.I2C()
    sht = adafruit_shtc3.SHTC3(i2c)
except:
    print("Temerature Sensor Failure")
    class SHT:
        def __init__(self):
            self.temperature = 0.0
            self.relative_humidity = 0.0
    sht = SHT()

battina = Controller(address=0x40)
loadina = Controller(address=0x44)
extrina = Controller(address=0x46)

class Stats:
    def __init__(self):
        self.extr_temp = 0.0
        self.extr_humidity = 0.0
        self.cpu_load = 0.0
        self.cpu_temp = 0.0
        self.batt_volts = 0.0
        self.batt_amps = 0.0
        self.batt_watts = 0.0
        self.load_volts = 0.0
        self.load_amps = 0.0
        self.load_watts = 0.0
        self.extr_volts = 0.0
        self.extr_amps = 0.0
        self.extr_watts = 0.0
        self.extr_fan = 0
        self.cpu_fan = 0
    def update(self):
        self.batt_volts = battina.voltage()
        self.batt_amps = battina.current()
        self.batt_watts = self.batt_amps * self.batt_volts
        self.cpu_temp = CPUTemperature().temperature
        self.cpu_load = float(psutil.cpu_percent())
        self.extr_temp = sht.temperature
        self.extr_humdity = sht.relative_humidity
        self.cpu_fan = GPIO.input(CPUFAN_PIN)
        self.extr_fan = GPIO.input(EXTRFAN_PIN)

def map_range(x, in_min, in_max, out_min, out_max):
  return (x - in_min) * (out_max - out_min) // (in_max - in_min) + out_min

def calc_vinfo(voltage):
    vrange = BATT_TYPE
    if voltage >= vrange[11]:
        return (100, "Charging", BLUE)
    elif voltage >= vrange[10]:
        return (100, "Discharging", GREEN)
    elif voltage >= vrange[9]:
        return (map_range(voltage, vrange[9], vrange[10], 90, 100), "Discharging", GREEN)
    elif voltage >= vrange[8]:
        return (map_range(voltage, vrange[8], vrange[9], 80, 90), "Discharging", GREEN)
    elif voltage >= vrange[7]:
        return (map_range(voltage, vrange[7], vrange[8], 70, 80), "Discharging", GREEN)
    elif voltage >= vrange[6]:
        return (map_range(voltage, vrange[6], vrange[7], 60, 70), "Discharging", GREEN)
    elif voltage >= vrange[5]:
        return (map_range(voltage, vrange[5], vrange[6], 50, 60), "Discharging", GREEN)
    elif voltage >= vrange[4]:
        return (map_range(voltage, vrange[4], vrange[5], 40, 50), "Discharging", GREEN)
    elif voltage >= vrange[3]:
        return (map_range(voltage, vrange[3], vrange[4], 30, 40), "Discharging", YELLOW)
    elif voltage >= vrange[2]:
        return (map_range(voltage, vrange[2], vrange[3], 20, 30), "Discharging", YELLOW)
    elif voltage >= vrange[1]:
        return (map_range(voltage, vrange[1], vrange[2], 10, 20), "Discharging", RED)
    elif voltage >= vrange[0]:
        return (map_range(voltage, vrange[0], vrange[1], 0, 10), "Shut Down", RED)

def display_batt_screen():
    with canvas(oled) as draw:
        stats.update()
        v_disp = f"{stats.batt_volts:.1f}v"
        draw.text((1,1), v_disp, font=medfont_large, fill="white")
        vinfo = calc_vinfo(stats.batt_volts)
        p_disp = f"{vinfo[0]:.0f}%"
        fontwidth = medfont_large.getlength(p_disp)
        nfill = vinfo[2]
        draw.text((oled.width - fontwidth, 1), p_disp, font=medfont_large, fill=nfill)
        m_disp = f"{stats.batt_amps:.2f}a"
        draw.text((1, 28), m_disp, font=medfont_large, fill="white")
        w_disp = f"{stats.batt_watts:.1f}w"
        fontwidth = medfont_large.getlength(w_disp)
        draw.text((oled.width - fontwidth, 28), w_disp, font=medfont_large, fill="white")
        shape = [(31, 64), (map_range(vinfo[0], 0, 100, 31, 92), 91)]
        draw.rectangle(shape, fill = vinfo[2])
        draw.bitmap((oled.width / 2 - 35, 62), batt_img)
#        if vinfo[1] != "Charging":
#           draw.bitmap((oled.width / 2 - 15, 80), chg_img)
        #fontwidth = regfont_small.getlength(BATT_TYPE[12])
        #draw.text((oled.width / 2 - fontwidth / 2, 75), BATT_TYPE[12], font=regfont_small, fill="red")


def display_load_screen():
    with canvas(oled) as draw:
        stats.update()
        l_disp = str(stats.cpu_load) + '%'
        draw.text((1, 1), l_disp, font=medfont_large, fill="white")
        m_disp = f"{stats.batt_amps:.2f}a"
        draw.text((1, 28), m_disp, font=medfont_large, fill="white")
        w_disp = f"{stats.batt_watts:.1f}w"
        fontwidth = medfont_large.getlength(w_disp)
        draw.text((oled.width - fontwidth, 28), w_disp, font=medfont_large, fill="white")
        c_disp = f"{stats.cpu_temp:.1f}°"
        fontwidth = medfont_large.getlength(c_disp)
        draw.text((oled.width - fontwidth, 1), c_disp, font=medfont_large, fill="white")
        if stats.cpu_fan == 1:
            f_disp = "CPU FAN ON"
        else:
            f_disp = "CPU FAN OFF"
        fontwidth = medfont_medium.getlength(f_disp)
        draw.text((oled.width / 2 - fontwidth / 2, 100), f_disp, font=medfont_medium, fill="yellow")


def display_extpower_screen():
    with canvas(oled) as draw:
        stats.update()
        draw.text((1, 1), "CPU:", font=regfont_large, fill="white")
        c_disp = f"{stats.cpu_temp:.1f}°"
        fontwidth = regfont_large.getlength(c_disp)
        draw.text((oled.width - fontwidth, 1), c_disp, font=regfont_large, fill="white")
        f_disp = "FAN OFF"
        fontwidth = regfont_large.getlength(f_disp)
        draw.text((oled.width / 2 - fontwidth / 2, 32), f_disp, font=regfont_large, fill="yellow")
        draw.text((1, 64), f"{stats.extr_temp:.1f}° {stats.extr_humidity:.0f}%", font=regfont_large, fill="white")


if __name__ == "__main__":
    stats = Stats()
    while(True):
        for x in range(3):
            display_batt_screen()
            sleep(3)
        for x in range(3):
            display_load_screen()
            sleep(3)
