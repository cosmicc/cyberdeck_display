#!/usr/bin/env python3

from loguru import logger as log
import subprocess
import sys
from datetime import datetime
from time import sleep

import adafruit_shtc3
import board
import psutil
from gpiozero import CPUTemperature
from ina260.controller import Controller
from luma.core.interface.serial import spi
from luma.core.render import canvas
from luma.oled.device import ssd1351
from pi1wire import Pi1Wire, Resolution
from PIL import Image, ImageFont
import pickle

loglevel = 'DEBUG'

INSTALL_DIR = "/home/ip/cyberdeck_display"
DATA_FILE= "/home/ip/display_data.db"

BATT_AGM = [10.50, 11.51, 11.66, 11.81, 11.95, 12.05, 12.15, 12.30, 12.50, 12.75, 13.00, 14.00, "SLA/AGM"]
BATT_WET = [10.50, 11.31, 11.58, 11.75, 11.90, 12.06, 12.20, 12.32, 12.42, 12.50, 12.60, 14.00, "WET"]
BATT_LIFEPO4 = [10.00, 12.00, 12.50, 12.80, 12.90, 13.00, 13.10, 13.20, 13.30, 13.40, 13.60, 14.00, "LIFEPO4"]

GREEN = "Lime"
YELLOW = "Yellow"
RED = "Crimson"
BLUE = "Blue"
DEFAULT = "White"
AMP_COLOR = "DarkOrange"

CPUFAN_PIN = 23
EXTRFAN_PIN = 22
HISTOGRAM_RESOLUTION = 125
SENSOR_RESOLUTION = 10
BATT_AH_SIZE = 10
BATT_TYPE = BATT_AGM

class Stats:
    extr_temp = 0.0
    extr_humidity = 0.0
    cpu_load = 0
    cpu_temp = 0.0
    batt_volts = 0.0
    batt_amps = 0.0
    batt_watts = 0.0
    batt_temp = 0.0
    batt_percent = 0
    batt_state = ""
    batt_color = DEFAULT
    load_volts = 0.0
    load_amps = 0.0
    load_watts = 0.0
    extr_volts = 0.0
    extr_amps = 0.0
    extr_watts = 0.0
    extr_fan = 0
    cpu_fan = 1
    batt_histogram_data = []
    load_histogram_data = []
    extr_histogram_data = []
    batt_charge_start_time = 0
    batt_start_time = datetime.now()
    log.debug('Loading saved pickle data...')
    try:
        dbfile = open(DATA_FILE, 'rb')
        db = pickle.load(dbfile)
        batt_running_avg = db['running_avg']
        batt_running_avg_count = db['avg_count']
        batt_last_full_time = db['last_full']
        last_boot = db['timestamp']
        log.info(f'Loaded saved data: {db}')
    except:
        dbfile = open(DATA_FILE, 'ab')
        db = {}
        db['timestamp'] = datetime.now()
        db['running_avg'] = 0
        db['avg_count'] = 0
        db['last_full'] = datetime.now()
        pickle.dump(db, dbfile)
        dbfile.close()
        log.critical('Error loading saved pickle data')
        exit(1)

    def __init__(self):
        for x_x in range(0, HISTOGRAM_RESOLUTION):
            self.batt_histogram_data.append(0)
            self.load_histogram_data.append(0)
            self.extr_histogram_data.append(0)

    def save_data(self):
        try:
            dbfile = open(DATA_FILE, 'ab')
            db = {}
            db['timestamp'] = datetime.now()
            db['running_avg'] = self.batt_rolling_avg
            db['avg_count'] = self.batt_avg_count
            db['last_full'] = self.batt_last_full_time
            pickle.dump(db, dbfile)
            dbfile.close()
        except:
            log.critical('Error saving pickle data')
            exit(1)

    def update(self):
        log.debug("Starting stats update...")
        self.uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
        try:
            self.load_volts = round(loadina.voltage(), 2)
            self.load_amps = round(loadina.current(), 2)
            self.load_watts = round(self.load_amps * self.load_volts, 1)
            log.info(f'Load power data: [{self.load_volts}v], [{self.load_amps}a], [{self.load_watts}w]')
        except:
            self.load_volts = self.batt_volts #TEMPORARY
            self.load_amps = self.batt_amps   #TEMPORARY
            self.load_watts = self.batt_watts #TEMPORARY
            log.warning('Load power sensor error, skipping')
        try:
            avolts = []
            aamps = []
            for x in range(SENSOR_RESOLUTION):
                 avolts.insert(0, round(battina.voltage(), 2))
                 aamps.insert(0, round(battina.current(), 2))
                 self.batt_watts = round(self.batt_amps * self.batt_volts, 1)
            log.info(f'Battery volt data: {avolts}')
            log.info(f'Battery amp data: {aamps}')
            self.batt_volts = round(sum(avolts) / len(avolts), 2)
            self.batt_amps = round(sum(aamps) / len(avolts), 2)
            self.batt_watts = round(self.batt_volts * self.batt_amps, 1)
            log.info(f'Battery power data: [{self.batt_volts}v], [{self.batt_amps}a], [{self.batt_watts}w]')
            self.batt_running_avg_count += 1
            self.batt_running_avg = (self.batt_running_avg * (self.batt_running_avg_count-1) + self.batt_amps) / self.batt_running_avg_count
            log.info(f'New battery running average: [{self.batt_running_avg:.3f}a], [{self.batt_running_avg_count}]')
        except:
            log.warning('Batt power sensor error, skipping')
        try:
            self.extr_volts = round(extrina.voltage(), 2)
            self.extr_amps = round(extrina.current(), 2)
            self.extr_watts = round(self.extr_amps * self.extr_volts, 1)
            for x in range(SENSOR_RESOLUTION):
                log.info(f'External volt data: {avolts}')
                log.info(f'External amp data: {aamps}')
                self.extr_volts = round(sum(avolts) / len(avolts), 2)
                self.extr_amps = round(sum(aamps) / len(avolts), 2)
                self.extr_watts = round(self.extr_volts * self.extr_amps, 1)
                log.info(f'External power data: [{self.extr_volts}v], [{self.extr_amps}a], [{self.extr_watts}w]')
        except:
            log.warning('External power sensor error, skipping')

        self.batt_info(self.batt_volts)
        self.batt_temp = 0.0
        try:
            self.cpu_temp = round(CPUTemperature().temperature, 1)
            self.cpu_load = int(psutil.cpu_percent())
            log.info(f'CPU data: [{self.cpu_load}%], [{self.cpu_temp}°]')
        except:
            log.warning('CPU data error, skipping')
        try:
            self.extr_temp = sht.temperature
            self.extr_humidity = sht.relative_humidity
            log.info(f'External temperature data: [{self.extr_temp}°], [{self.extr_humidity}%]')
        except:
            log.warning('External temperature error, skipping')
        self.cpu_fan = gpio_info(CPUFAN_PIN)["level"]
        self.extr_fan = gpio_info(EXTRFAN_PIN)["level"]
        log.debug('Starting histogram update...')
        self.load_histogram_data.pop(HISTOGRAM_RESOLUTION-1)
        self.load_histogram_data.insert(0, int(self.load_watts))
        log.debug('Histogram update complete')
        log.debug('Stats update complete')
        #print (self.__dict__)

    def batt_info(self, voltage):
        log.debug(f'Battery calculations starting...')
        vrange = BATT_TYPE
        if voltage >= vrange[11]:
            self.batt_percent = 100
            self.batt_state = "Charging"
            self.batt_color = BLUE
        elif voltage >= vrange[10]:
            self.batt_percent = 100
            self.batt_state = "Discharging"
            self.batt_color = GREEN
        elif voltage >= vrange[9]:
            self.batt_percent = map_range(voltage, vrange[9], vrange[10], 90, 100)
            self.batt_state = "Discharging"
            self.batt_color = GREEN
        elif voltage >= vrange[8]:
            self.batt_percent = map_range(voltage, vrange[8], vrange[9], 80, 90)
            self.batt_state = "Discharging"
            self.batt_color = GREEN
        elif voltage >= vrange[7]:
            self.batt_percent = map_range(voltage, vrange[7], vrange[8], 70, 80)
            self.batt_state = "Discharging"
            self.batt_color = GREEN
        elif voltage >= vrange[6]:
            self.batt_percent = map_range(voltage, vrange[6], vrange[7], 60, 70)
            self.batt_state = "Discharging"
            self.batt_color = GREEN
        elif voltage >= vrange[5]:
            self.batt_percent = map_range(voltage, vrange[5], vrange[6], 50, 60)
            self.batt_state = "Discharging"
            self.batt_color = GREEN
        elif voltage >= vrange[4]:
            self.batt_percent = map_range(voltage, vrange[4], vrange[5], 40, 50)
            self.batt_state = "Discharging"
            self.batt_color = GREEN
        elif voltage >= vrange[3]:
            self.batt_percent = map_range(voltage, vrange[3], vrange[4], 30, 40)
            self.batt_state = "Discharging"
            self.batt_color = YELLOW
        elif voltage >= vrange[2]:
            self.batt_percent = map_range(voltage, vrange[2], vrange[3], 20, 30)
            self.batt_state = "Discharging"
            self.batt_color = YELLOW
        elif voltage >= vrange[1]:
            self.batt_percent = map_range(voltage, vrange[1], vrange[2], 10, 20)
            self.batt_state = "Discharging"
            self.batt_color = RED
        elif voltage >= vrange[0]:
            self.batt_percent = map_range(voltage, vrange[0], vrange[1], 0, 10)
            self.batt_state = "Shutdown"
            self.batt_color = RED
        log.info(f'Battery info: [{BATT_TYPE[12]}], [{self.batt_percent}%], [{self.batt_state}], [{self.batt_color}]')
        log.debug('Battery calculations complete.')

def map_range(x, in_min, in_max, out_min, out_max):
  return (x - in_min) * (out_max - out_min) // (in_max - in_min) + out_min

def gpio_info(pin):
    p = subprocess.Popen(f"raspi-gpio get {pin}", stdout=subprocess.PIPE, shell=True)
    (output, err) = p.communicate()
    p_status = p.wait()
    gdata = output.decode().strip()
    gdata_split = gdata.split(" ")
    level = gdata_split[2].split("=")[1]
    fsel = gdata_split[3].split("=")[1]
    func = gdata_split[4].split("=")[1]
    pull = gdata_split[5].split("=")[1]
    return {"level": level, "fsel": fsel, "func": func, "pull": pull}

def draw_value(position, text, color, draw):
    if position == 5 or position == 6:
        fontwidth = regfont_medium.getlength(text)
    #elif position == 7:
    #    fontwidth = medfont_medium.getlength(text)
    else:
        fontwidth = medfont_large.getlength(text)
    if position == 1:
        draw.text((((oled.width / 2) / 2) - (fontwidth / 2) - 3, 79), text, font=medfont_large, fill=color)
    elif position == 2:
        draw.text((oled.width - ((oled.width / 2) / 2) - (fontwidth / 2) + 3, 79), text, font=medfont_large, fill=color)
    elif position == 3:
        draw.text((((oled.width / 2) / 2) - (fontwidth / 2) - 3, 103), text, font=medfont_large, fill=color)
    elif position == 4:
        draw.text((oled.width - ((oled.width / 2) / 2) - (fontwidth / 2) + 3, 103), text, font=medfont_large, fill=color)
    elif position == 5:
        draw.text((1, 1), text, font=regfont_medium, fill=color)
    elif position == 6:
        draw.text((oled.width - fontwidth - 3, 1), text, font=regfont_medium, fill=color)
    elif position == 7:
        draw.text(((oled.width / 2) - (fontwidth / 2), 103), text, font=medfont_large, fill=color)

def draw_histogram(data, draw):
    lpos = 2
    for dt in data:
        draw.line([(lpos, 75-dt), (lpos, 75)], fill=BLUE)
        lpos += 1
    shape = [(1,25), (oled.width-1, 75)]
    draw.rectangle(shape, outline = DEFAULT)

def draw_fan(fan, draw):
        img = Image.new('RGBA', (20, 20), 0x47)
        if fan == 1:
            img.paste(fanon_img)
        else:
            img.paste(fanoff_img)
        draw.bitmap((oled.width / 2 - 7, 1), img)

def display_watts(stat, err, wrn, draw):
    text = f"{stat:.1f}w"
    if stat >= err:
        color = RED
    elif stat >= wrn:
        color = YELLOW
    else:
        color = DEFAULT
    draw_value(2, text, color, draw)

def batt_detail_screen():
    with canvas(oled) as draw:
        stats.update()

        display_watts(stats.batt_watts, 113, 71, draw)

        text = f"{stats.batt_percent:.0f}%"
        color = stats.batt_color
        draw_value(1, text, color, draw)

        text = f"{stats.batt_temp:.1f}°"
        if stats.batt_temp <= 0 or stats.batt_temp >= 45:
            color = RED
        elif stats.batt_temp <= 5 or stats.batt_temp >= 40:
            color = YELLOW
        else:
            color = GREEN
        draw_value(3, text, color, draw)

        text = f"{stats.batt_amps:.2f}a"
        color = AMP_COLOR
        draw_value(4, text, color, draw)

        text = f"BATT"
        color = YELLOW
        draw_value(5, text, color, draw)

        text = f"{stats.batt_volts:.1f}v"
        color = stats.batt_color
        draw_value(6, text, color, draw)

        draw_histogram(stats.batt_histogram_data, draw)

       #        v_disp = f"{stats.batt_volts:.1f}v"
#        fontwidth = medfont_large.getlength(v_disp)
#        draw.text((((oled.width / 2) / 2) - (fontwidth / 2) - 3,1), v_disp, font=medfont_large, fill="white")
        #if vinfo[1] != "Charging":
        #   draw.bitmap((oled.width / 2 - 15, 80), chg_img)

def cpu_screen():
    with canvas(oled) as draw:
        stats.update()

        text = str(stats.cpu_load) + '%'
        if stats.cpu_load > 90:
            color = RED
        elif stats.cpu_load > 65:
            color = YELLOW
        else:
            color = DEFAULT
        draw_value(1, text, color, draw)

        text = f"{stats.load_amps:.2f}a"
        color = AMP_COLOR
        draw_value(4, text, color, draw)

        text = f"LOAD"
        color = YELLOW
        draw_value(5, text, color, draw)

        display_watts(stats.load_watts, 48, 36, draw)

        text = f"{stats.cpu_temp:.1f}°"
        if stats.cpu_temp > 65:
            color = YELLOW
        elif stats.cpu_temp > 80:
            color = RED
        else:
            color = GREEN
        draw_value(3, text, color, draw)

        text = f"{stats.load_volts:.1f}v"
        if stats.load_volts > 14 or stats.load_volts < 11.0:
            color = RED
        elif stats.load_volts > 13 or stats.load_volts < 11.5:
            color = YELLOW
        else:
            color = GREEN
        draw_value(6, text, color, draw)

        draw_fan(stats.cpu_fan, draw)

        draw_histogram(stats.load_histogram_data, draw)

def extr_screen():
    with canvas(oled) as draw:
        stats.update()

        text = f"{stats.extr_temp:.1f}°"
        if stats.extr_temp >= 60 or stats.extr_temp <= 0:
            color = RED
        elif stats.extr_temp >= 45 or stats.extr_temp <= 10:
            color = YELLOW
        else:
            color = GREEN
        draw_value(1, text, color, draw)

        text = f"{stats.extr_amps:.2f}a"
        color = AMP_COLOR
        draw_value(4, text, color, draw)

        text = f"EXTR"
        color = YELLOW
        draw_value(5, text, color, draw)

        display_watts(stats.extr_watts, 127, 113, draw)

        text = f"{stats.extr_volts:.1f}v"
        if stats.extr_volts >= 40 or stats.extr_volts <= 12.0:
            color = RED
        elif stats.extr_volts >= 30 or stats.extr_volts <= 13:
            color = YELLOW
        else:
            color = GREEN
        draw_value(6, text, color, draw)

        text = f"{stats.extr_humidity:.0f}%"
        if stats.extr_humidity > 65:
            color = RED
        elif stats.extr_humidity > 50:
            color = YELLOW
        else:
            color = DEFAULT
        draw_value(3, text, color, draw)

        draw_fan(stats.extr_fan, draw)

        draw_histogram(stats.extr_histogram_data, draw)

def batt_screen():
    with canvas(oled) as draw:
        stats.update()
        text = f'{stats.batt_percent:.0f}%'
        fontwidth = bldfont_large.getlength(text)
        draw.text(((oled.width / 2) - (fontwidth / 2), 3), text, font=bldfont_large, fill=GREEN)
        shape = [(17, 50), (map_range(stats.batt_percent, 0, 100, 17, 102), 95)]
        draw.rectangle(shape, fill = stats.batt_color)
        draw.bitmap((oled.width / 2 - 50, 49), batt_img)
        text = f'{stats.batt_watts:.1f} Watts'
        color = "Orange"
        draw_value(7, text, color, draw)
        if stats.batt_state == "Charging":
            draw.bitmap((oled.width / 2 - 25, 65), chg_img)


if __name__ == "__main__":
    consoleformat = "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green>| <level>{level: <8}</level> | <level>{message}</level> |<cyan>{function}</cyan>:<cyan>{line}</cyan>"
    log.remove()
    log.add(sink=sys.stdout, level=loglevel, format=consoleformat, colorize=True)

    REGFONT = f"{INSTALL_DIR}/fonts/sf-pro-display/SFPRODISPLAYREGULAR.OTF"
    MEDFONT = f"{INSTALL_DIR}/fonts/sf-pro-display/SFPRODISPLAYMEDIUM.OTF"
    BLDFONT = f"{INSTALL_DIR}/fonts/sf-pro-display/SFPRODISPLAYBOLD.OTF"

    regfont_large = ImageFont.truetype(REGFONT, 22)
    regfont_medium = ImageFont.truetype(REGFONT, 18)
    regfont_small = ImageFont.truetype(REGFONT, 12)
    medfont_large = ImageFont.truetype(MEDFONT, 22)
    medfont_medium = ImageFont.truetype(MEDFONT, 18)
    bldfont_large = ImageFont.truetype(MEDFONT, 40)

    batt_img = Image.open(f"{INSTALL_DIR}/images/batt.png")
    batt_img = batt_img.resize((100,50))
    chg_img = Image.open(f"{INSTALL_DIR}/images/charging.png").convert("RGBA")
    chg_img = chg_img.resize((40,20))
    fanon_img = Image.open(f"{INSTALL_DIR}/images/fan_on.png").convert("RGBA")
    fanon_img = fanon_img.resize((20,20))
    fanoff_img = Image.open(f"{INSTALL_DIR}/images/fan_on.png").convert("RGBA")
    fanoff_img = fanoff_img.resize((20,20))

    log.debug("Initalizing display...")
    serial = spi(device=0, port=0, gpio_DC=20, gpio_RST=21)
    oled = ssd1351(serial, width=128, height=128, bgr=True)
    log.info("Display initialization successful")
    log.debug("Initializing sensors...")
    try:
        i2c = board.I2C()
        sht = adafruit_shtc3.SHTC3(i2c)
        log.info("External temperature sensor initialized")
    except:
        log.error("External temperature sensor failure")
    try:
        battina = Controller(address=0x40)
        battina.voltage()
        log.info("Battery sensor initialized")
    except:
        log.error("Battery power sensor failure")
    try:
        loadina = Controller(address=0x44)
        loadina.voltage()
        log.info("Load sensor initialized")
    except:
        log.error("Load power sensor failure")
    try:
        extrina = Controller(address=0x46)
        extrina.voltage()
        log.info("External power sensor initialized")
    except:
        log.error("External power sensor failure")

    stats = Stats()
    while(True):
        for x in range(3):
            log.debug("Executing battery screen routine...")
            batt_screen()
            sleep(3)
        for x in range(3):
            log.debug("Executing load screen routing...")
            cpu_screen()
            sleep(3)
        for x in range(3):
            log.debug("Executing battery detail screen...")
            batt_detail_screen()
            sleep(3)
        for x in range(3):
            log.debug("Executing external detail screen...")
            extr_screen()
            sleep(3)
